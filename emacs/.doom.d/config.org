#+TITLE: Doom Emacs Configuration

This is an ongoing evolution of my original Emacs configuration files, inspired by a bunch of resources I've found online.

* Table of Contents :TOC:
- [[#doom-configuration-functions-and-macros][Doom Configuration Functions and Macros]]
- [[#preamble][Preamble]]
- [[#personal-info][Personal Info]]
- [[#appearance][Appearance]]
  - [[#font][Font]]
  - [[#theme][Theme]]
  - [[#line-numbers][Line Numbers]]
- [[#emacs-customize][Emacs Customize]]
- [[#projectile][Projectile]]
- [[#org-mode][Org mode]]
- [[#lsp][LSP]]
- [[#ccpp][C/CPP]]
  - [[#makefile-generation][Makefile generation]]
  - [[#code-indexing][Code indexing]]
  - [[#debugging][Debugging]]

* Doom Configuration Functions and Macros

Here are some additional functions/macros that could help you configure Doom:

- =load!= for loading external =*.el= files relative to this one
- =use-package!= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!' for adding directories to the =load-path=, relative to this file. Emacs searches the =load-path= when you load packages with =require= or =use-package=.
- =map!= for binding new keys

* Preamble

#+begin_src emacs-lisp :tangle yes
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* Personal Info

Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.

#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Donald Thompson"
      user-mail-address "donald@witt3rd.com")
#+end_src

* Appearance

This section affects the themes, fonts, and other visual elements.

** Font

Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:

+ =doom-font=
+ =doom-variable-pitch-font=
+ =doom-big-font= -- used for =doom-big-font-mode=; use this for presentations or streaming.

They all accept either a font-spec, font string (="Input Mono-12"=), or xlfd font string. You generally only need these two:

#+begin_src emacs-lisp :tangle yes
(setq
 doom-font (font-spec :family "FiraCode Nerd Font Mono" :size 16 :weight 'semi-light)
 doom-variable-pitch-font (font-spec :family "FiraCode Nerd Font" :size 16)
 doom-big-font (font-spec :family "FiraCode Nerd Font" :size 36 :weight 'bold))
#+end_src

** Theme

 There are two ways to load a theme. Both assume the theme is installed and available. You can either set =doom-theme= or manually load a theme with the =load-theme= function. This is the default:

#+begin_src emacs-lisp :tangle yes
(setq custom-safe-themes t)
(if (window-system)
    (setq doom-theme 'doom-outrun-electric)
  (setq doom-theme 'doom-one))
(setq fancy-splash-image "~/.doom.d/doom.png")
#+end_src

** Line Numbers

This determines the style of line numbers in effect. If set to =nil=, line numbers are disabled. For relative line numbers, set this to =relative=.

#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type t)
#+end_src

* Emacs Customize

Ignore emacs "customize" by redirecting the file to /dev/null

#+begin_src emacs-lisp :tangle yes
(setq custom-file null-device)
#+end_src

* Projectile

Set project search paths and settings

#+begin_src emacs-lisp :tangle yes
(setq
 projectile-project-search-path '(("~/src/witt3rd/" . 5) "~/org" ("~/dotfiles" . 0))
 projectile-auto-discover 1
 )
#+end_src

* Org mode

Set the root directory.  It must be set before org loads!

#+begin_src emacs-lisp :tangle yes
(setq
 org-directory "~/org/"
 )
#+end_src

Add [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]] for nicer agenda views

#+begin_src emacs-lisp :tangle yes
(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-super-agenda-groups '((:name "Today"
                                   :time-grid t
                                   :scheduled today)
                                  (:name "Due Today"
                                   :deadline today)
                                  (:name "Important"
                                   :priority "A")
                                  (:name "Overdue"
                                   :deadline past)
                                  (:name "Due soon"
                                   :deadline future)
                                  (:name "Big Outcomes"
                                   :tag "bo")))
  :config
  (org-super-agenda-mode)
  )
#+end_src

* LSP

#+begin_src emacs-lisp :tangle yes
(setq lsp-clients-clangd-args '("-j=3"
                                "--background-index"
                                "--clang-tidy"
                                "--completion-style=detailed"
                                "--header-insertion=iwyu"
                                "--header-insertion-decorators=0"))
(after! lsp-clangd (set-lsp-priority! 'clangd 2))
#+end_src

* C/CPP

** Makefile generation

[[https://github.com/atilaneves/cmake-ide][cmake-ide]]

#+begin_src emacs-lisp :tangle yes
(after! projectile
  (defun my/cmake-ide-find-project ()
    "Finds the directory of the project for cmake-ide."
    (with-eval-after-load 'projectile
      (setq cmake-ide-project-dir (projectile-project-root))
      (setq cmake-ide-build-dir (concat cmake-ide-project-dir "build")))
    (setq cmake-ide-compile-command
          (concat "cd " cmake-ide-build-dir " && cmake .. && make"))
    (cmake-ide-load-db))
  (defun my/switch-to-compilation-window ()
    "Switches to the *compilation* buffer after compilation."
    (other-window 1))
  ;;  :bind ([remap comment-region] . cmake-ide-compile)
  (advice-add 'cmake-ide-compile :after #'my/switch-to-compilation-window)
  (add-hook 'c++-mode-hook #'my/cmake-ide-find-project)
  )
#+end_src

** Code indexing

[[https://github.com/Andersbakken/rtags][RTags]]

#+begin_src emacs-lisp :tangle yes
(require 'rtags)
#+end_src

** Debugging

[[https://github.com/emacs-lsp/dap-mode/blob/master/dap-cpptools.el][dap-cpptools]]

#+begin_src emacs-lisp :tangle yes
(require 'dap-cpptools)
#+end_src
